--=============== МОДУЛЬ 4. УГЛУБЛЕНИЕ В SQL =======================================
--= ПОМНИТЕ, ЧТО НЕОБХОДИМО УСТАНОВИТЬ ВЕРНОЕ СОЕДИНЕНИЕ И ВЫБРАТЬ СХЕМУ PUBLIC===========
SET search_path TO public;

--======== ОСНОВНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--База данных: если подключение к облачной базе, то создаёте новую схему с префиксом в --виде фамилии, название должно быть на латинице в нижнем регистре и таблицы создаете --в этой новой схеме, если подключение к локальному серверу, то создаёте новую схему и --в ней создаёте таблицы.

--Спроектируйте базу данных, содержащую три справочника:
--· язык (английский, французский и т. п.);
--· народность (славяне, англосаксы и т. п.);
--· страны (Россия, Германия и т. п.).
--Две таблицы со связями: язык-народность и народность-страна, отношения многие ко многим. Пример таблицы со связями — film_actor.
--Требования к таблицам-справочникам:
--· наличие ограничений первичных ключей.
--· идентификатору сущности должен присваиваться автоинкрементом;
--· наименования сущностей не должны содержать null-значения, не должны допускаться --дубликаты в названиях сущностей.
--Требования к таблицам со связями:
--· наличие ограничений первичных и внешних ключей.

--В качестве ответа на задание пришлите запросы создания таблиц и запросы по --добавлению в каждую таблицу по 5 строк с данными.
 
--СОЗДАНИЕ ТАБЛИЦЫ ЯЗЫКИ
drop table if exists lang;

create table lang
(
lang_id integer primary key,
lang varchar(30) not null unique
);

--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ ЯЗЫКИ

insert into lang
values
(1, 'Английский'),
(2, 'Французский'), 
(3, 'Немецкий'),
(4, 'Японский'),
(5, 'Китайский');

--СОЗДАНИЕ ТАБЛИЦЫ НАРОДНОСТИ
drop table if exists nat; 

create table nat
(
nat_id integer primary key,
nat varchar(30) not null unique
);


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ НАРОДНОСТИ

insert into nat 
values
(1, 'Англичане'),
(2, 'Французы'), 
(3, 'Немцы'),
(4, 'Японы'),
(5, 'Китайцы');


--СОЗДАНИЕ ТАБЛИЦЫ СТРАНЫ
drop table if exists country;

create table country
(
country_id integer primary key,
country varchar(30) not null
);

--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СТРАНЫ

insert into country
values
(1, 'Англия'),
(2, 'Франция'), 
(3, 'Германия'),
(4, 'Япония'),
(5, 'Китай');

--СОЗДАНИЕ ПЕРВОЙ ТАБЛИЦЫ СО СВЯЗЯМИ
drop table if exists lang_nat;

create table lang_nat
(
lang_id integer not null,
nat_id integer not null,
primary key (lang_id, nat_id),
foreign key (lang_id) references staroseltceva.lang(lang_id),
foreign key (nat_id) references staroseltceva.nat(nat_id)
);


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СО СВЯЗЯМИ

insert into lang_nat
	values (1, 1),
			(1, 2),
			(1, 3),
			(1, 4),
			(1, 5),
			(2, 2),
			(2, 3),
			(2, 4),
			(2, 5),
			(3, 3),
			(3, 4),
			(3, 5),
			(4, 4),
			(4, 5),
			(5, 5);


--СОЗДАНИЕ ВТОРОЙ ТАБЛИЦЫ СО СВЯЗЯМИ
drop table if exists nat_country;

create table nat_country
(
nat_id integer not null,
country_id integer not null,
primary key (nat_id, country_id),
foreign key (nat_id) references nat(nat_id),
foreign key (country_id) references country(country_id)
);


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СО СВЯЗЯМИ

insert into nat_country
	values (1, 1),
			(1, 2),
			(1, 3),
			(1, 4),
			(1, 5),
			(2, 2),
			(2, 3),
			(2, 4),
			(2, 5),
			(3, 3),
			(3, 4),
			(3, 5),
			(4, 4),
			(4, 5),
			(5, 5);

